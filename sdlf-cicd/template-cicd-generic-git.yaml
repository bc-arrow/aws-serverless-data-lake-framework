AWSTemplateFormatVersion: "2010-09-09"
Description: CICD to deploy in any account SDLF is used

Parameters:
  pCustomBucketPrefix:
    Description: S3 Bucket Prefix if different from default. Must be a valid S3 Bucket name
    Type: String
    Default: sdlf
  pDataAccountId:
    Description: AWS account ID where data resources are deployed
    Type: String
    AllowedPattern: (\d{12}|^$)
    ConstraintDescription: Must be an AWS account ID
  pCodebuildBootstrap:
    Description: Deploy the sdlf-cicd-bootstrap CodeBuild project
    Type: String
    Default: false
  pCodeBuildSuffix:
    Description: Suffix appended to the CodeBuild project name
    Type: String
    AllowedPattern: '[A-Za-z0-9\-_]{1,139}'
  pDeploymentType:
    Description: Deployment type
    Type: String
    AllowedValues: [cfn-template, cfn-module, cdk-construct]
    Default: cfn-template
  pTemplatePrefixes:
    Description: Prefixes of CloudFormation template files (in YAML)
    Type: String

Conditions:
  UseCustomBucketPrefix: !Not [!Equals [!Ref pCustomBucketPrefix, sdlf]]
  DeployCodeBuildBootstrap: !Equals [!Ref pCodebuildBootstrap, true]

Resources:
  rKMSKey:
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3042
    Properties:
      Description: SDLF KMS key for encryption of CodePipeline artifacts
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Sid: Allow logs access
            Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"

  rArtifactsBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      BucketName:
        !If [
          UseCustomBucketPrefix,
          !Sub "${pCustomBucketPrefix}-cicd-cfn-artifacts",
          !Sub "sdlf-${AWS::Region}-${AWS::AccountId}-${pCodeBuildSuffix}-cicd-cfn-artifacts",
        ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rArtifactsBucket
      PolicyDocument:
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rArtifactsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rArtifactsBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rSdlfBootstrapCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Condition: DeployCodeBuildBootstrap
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sdlf-codebuild
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-*
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${rArtifactsBucket}/*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource:
                  - !GetAtt rKMSKey.Arn
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub arn:${AWS::Partition}:iam::*:role/sdlf-cicd-codebuild-${AWS::AccountId}-*

  rSdlfBootstrapCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Condition: DeployCodeBuildBootstrap
    Properties:
      Name: sdlf-cicd-bootstrap
      Artifacts:
        Type: NO_ARTIFACTS
      EncryptionKey: !GetAtt rKMSKey.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_PARTITION
            Type: PLAINTEXT
            Value: !Ref AWS::Partition
          - Name: ARTIFACTS_BUCKET
            Type: PLAINTEXT
            Value: !Ref rArtifactsBucket
          - Name: TARGET_ACCOUNT_CODEBUILD_ROLE
            Type: PLAINTEXT
            Value: !Sub sdlf-cicd-codebuild-${AWS::AccountId}-${pCodeBuildSuffix}
          - Name: TARGET_ACCOUNT
            Type: PLAINTEXT
            Value: !Ref pDataAccountId
          - Name: DEPLOYMENT_TYPE
            Type: PLAINTEXT
            Value: cfn-template # can also be set to cfn-module
          - Name: SDLF_CONSTRUCTS
            Type: PLAINTEXT
            Value: sdlf-foundations sdlf-dataset sdlf-datalakeLibrary sdlf-pipeline sdlf-team
          - Name: SDLF_STAGE_CONSTRUCTS
            Type: PLAINTEXT
            Value: sdlf-stage-lambda sdlf-stage-glue
      ServiceRole: !GetAtt rSdlfBootstrapCodeBuildServiceRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                  python: 3.12
              commands:
                - |-
                    aws --version # version 1 installed using pip by codebuild
                    pip3 uninstall -y awscli
                    aws --version # version 2
            build:
              commands:
                - |-
                  # section to remove and replace with CodeBuild source configuration
                  git clone --single-branch --branch main https://github.com/bc-arrow/data-lakes-on-aws-custom.git
                  cd aws-serverless-data-lake-framework/
                - |-
                  python3 -m venv .venv
                  source .venv/bin/activate
                  pip3 install --upgrade pip setuptools
                - |-
                  STS_ENDPOINT_URL="https://sts.$AWS_REGION.amazonaws.com"
                  if crossaccount_role=$(aws sts --endpoint-url "$STS_ENDPOINT_URL" assume-role --role-arn "arn:$AWS_PARTITION:iam::$TARGET_ACCOUNT:role/$TARGET_ACCOUNT_CODEBUILD_ROLE" --role-session-name "codebuild-bootstrap")
                  then
                    AWS_ACCESS_KEY_ID=$(echo "$crossaccount_role" | jq -r .Credentials.AccessKeyId)
                    AWS_SECRET_ACCESS_KEY=$(echo "$crossaccount_role" | jq -r .Credentials.SecretAccessKey)
                    AWS_SESSION_TOKEN=$(echo "$crossaccount_role" | jq -r .Credentials.SessionToken)
                    export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
                  else
                    echo "Unable to assume role $TARGET_ACCOUNT_CODEBUILD_ROLE in target account $TARGET_ACCOUNT"
                    exit 1
                  fi

                  echo "SDLF_CONSTRUCTS: $SDLF_CONSTRUCTS"
                  for SDLF_CONSTRUCT in $SDLF_CONSTRUCTS; do
                    echo "Building $SDLF_CONSTRUCT"
                    pushd "$SDLF_CONSTRUCT" || exit 1
                    bash buildspec.sh || exit 1
                    popd || exit 1
                  done
                  echo "SDLF_STAGE_CONSTRUCTS: $SDLF_STAGE_CONSTRUCTS"
                  for SDLF_CONSTRUCT in $SDLF_STAGE_CONSTRUCTS; do
                    echo "Building $SDLF_CONSTRUCT"
                    pushd "$SDLF_CONSTRUCT" || exit 1
                    bash buildspec.sh || exit 1
                    popd || exit 1
                  done
          artifacts:
            files:
              - "*"
              - "**/*"


  rDatalakeCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess # TODO
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sdlf-codebuild
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-*
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${rArtifactsBucket}/*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource:
                  - !GetAtt rKMSKey.Arn
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub arn:${AWS::Partition}:iam::${pDataAccountId}:role/sdlf-cicd-codebuild-${AWS::AccountId}-${pCodeBuildSuffix}
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:UpdateStack
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-foundations-*
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-dataset-*
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-pipeline-*
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-team-*

  rDatalakeCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub sdlf-cicd-${pCodeBuildSuffix}
      Artifacts:
        Type: NO_ARTIFACTS
      EncryptionKey: !GetAtt rKMSKey.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_PARTITION
            Type: PLAINTEXT
            Value: !Ref AWS::Partition
          - Name: TARGET_ACCOUNT_CODEBUILD_ROLE
            Type: PLAINTEXT
            Value: !Sub sdlf-cicd-codebuild-${AWS::AccountId}-${pCodeBuildSuffix}
          - Name: DEPLOYMENT_TYPE
            Type: PLAINTEXT
            Value: !Ref pDeploymentType
          - Name: SDLF_CONSTRUCT
            Type: PLAINTEXT
            Value: sdlf-foundations
          - Name: TARGET_ACCOUNT
            Type: PLAINTEXT
            Value: !Ref pDataAccountId
          - Name: ARTIFACTS_BUCKET
            Type: PLAINTEXT
            Value: !Sub "sdlf-${AWS::Region}-${pDataAccountId}-${pCodeBuildSuffix}-cicd-cfn-artifacts"
          - Name: TEMPLATE_PREFIXES
            Type: PLAINTEXT
            Value: !Ref pTemplatePrefixes
      ServiceRole: !GetAtt rDatalakeCodeBuildServiceRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                  python: 3.12
              commands:
                - |-
                    aws --version # version 1 installed using pip by codebuild
                    pip3 uninstall -y awscli
                    aws --version # version 2
            build:
              commands:
                - |-
                    # section to remove and replace with CodeBuild source configuration
                    git clone --single-branch --branch main https://github.com/bc-arrow/data-lakes-on-aws-custom.git
                    cd aws-serverless-data-lake-framework/sdlf-utils/workshop-examples/10-demo/sdlf-workshop/
                - |-
                    declare -a SDLF_CONSTRUCTS=("sdlf-foundations" "sdlf-dataset" "sdlf-pipeline" "sdlf-datalakeLibrary" "sdlf-team")
                    CODEBUILD_ENDPOINT_URL="https://codebuild.$AWS_REGION.amazonaws.com"
                    build_ids=()
                    for SDLF_CONSTRUCT in "${SDLF_CONSTRUCTS[@]}"
                    do
                      build_id=$(aws codebuild --endpoint-url "$CODEBUILD_ENDPOINT_URL" start-build \
                          --project-name sdlf-cicd-bootstrap \
                          --environment-variables-override name=TARGET_ACCOUNT_CODEBUILD_ROLE,value="$TARGET_ACCOUNT_CODEBUILD_ROLE" name=ARTIFACTS_BUCKET,value="$ARTIFACTS_BUCKET" name=TARGET_ACCOUNT,value="$TARGET_ACCOUNT" name=SDLF_CONSTRUCTS,value="$SDLF_CONSTRUCT" name=SDLF_STAGE_CONSTRUCTS,value="" name=DEPLOYMENT_TYPE,value="$DEPLOYMENT_TYPE" \
                          --query "build.id" --output text)
                      echo "Building $SDLF_CONSTRUCT: $build_id"
                      build_ids+=("$build_id")
                    done

                    echo "Waiting for all bootstrap builds to complete..."
                    for build_id in "${build_ids[@]}"
                    do
                      build_status="IN_PROGRESS"
                      while [ "$build_status" == "IN_PROGRESS" ]
                      do
                        build_status=$(aws codebuild --endpoint-url "$CODEBUILD_ENDPOINT_URL" batch-get-builds --ids "$build_id" --query "builds[0].buildStatus" --output text)
                        sleep 20
                      done
                      if [ "$build_status" != "SUCCEEDED" ]
                      then
                        echo "At least one bootstrap build failed: id $build_id"
                        exit 1
                      fi
                    done

                    # build SDLF stages
                    declare -a SDLF_CONSTRUCTS=("sdlf-stage-lambda" "sdlf-stage-glue")
                    build_ids=()
                    for SDLF_CONSTRUCT in "${SDLF_CONSTRUCTS[@]}"
                    do
                      build_id=$(aws codebuild --endpoint-url "$CODEBUILD_ENDPOINT_URL" start-build \
                          --project-name sdlf-cicd-bootstrap \
                          --environment-variables-override name=TARGET_ACCOUNT_CODEBUILD_ROLE,value="$TARGET_ACCOUNT_CODEBUILD_ROLE" name=ARTIFACTS_BUCKET,value="$ARTIFACTS_BUCKET" name=TARGET_ACCOUNT,value="$TARGET_ACCOUNT" name=SDLF_CONSTRUCTS,value="$SDLF_CONSTRUCT" name=SDLF_STAGE_CONSTRUCTS,value="" name=DEPLOYMENT_TYPE,value="$DEPLOYMENT_TYPE" \
                          --query "build.id" --output text)
                      echo "Building $SDLF_CONSTRUCT: $build_id"
                      build_ids+=("$build_id")
                    done
                    echo "Waiting for all sdlf stage bootstrap builds to complete..."
                    for build_id in "${build_ids[@]}"
                    do
                      build_status="IN_PROGRESS"
                      while [ "$build_status" == "IN_PROGRESS" ]
                      do
                        build_status=$(aws codebuild --endpoint-url "$CODEBUILD_ENDPOINT_URL" batch-get-builds --ids "$build_id" --query "builds[0].buildStatus" --output text)
                        sleep 20
                      done
                      if [ "$build_status" != "SUCCEEDED" ]
                      then
                        echo "At least one sdlf stage bootstrap build failed: id $build_id"
                        exit 1
                      fi
                    done

                    STS_ENDPOINT_URL="https://sts.$AWS_REGION.amazonaws.com"
                    if crossaccount_role=$(aws sts --endpoint-url "$STS_ENDPOINT_URL" assume-role --role-arn "arn:$AWS_PARTITION:iam::$TARGET_ACCOUNT:role/$TARGET_ACCOUNT_CODEBUILD_ROLE" --role-session-name "codebuild-bootstrap")
                    then
                      AWS_ACCESS_KEY_ID=$(echo "$crossaccount_role" | jq -r .Credentials.AccessKeyId)
                      AWS_SECRET_ACCESS_KEY=$(echo "$crossaccount_role" | jq -r .Credentials.SecretAccessKey)
                      AWS_SESSION_TOKEN=$(echo "$crossaccount_role" | jq -r .Credentials.SessionToken)
                      export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
                    else
                      echo "Unable to assume role $TARGET_ACCOUNT_CODEBUILD_ROLE in target account $TARGET_ACCOUNT"
                      exit 1
                    fi

                    CLOUDFORMATION_ENDPOINT_URL="https://cloudformation.$AWS_REGION.amazonaws.com"

                    for template_prefix in $TEMPLATE_PREFIXES
                    do
                      for template in "$template_prefix"-*.yaml
                      do
                        [ -e "$template" ] || break # null check
                        sed -i "s|pCicdRole: Admin|pCicdRole: $TARGET_ACCOUNT_CODEBUILD_ROLE|g" "$template"
                        template_basename=$(basename "$template" .yaml)

                        STACK_NAME="sdlf-$template_basename"
                        aws cloudformation --endpoint-url "$CLOUDFORMATION_ENDPOINT_URL" deploy \
                            --stack-name "$STACK_NAME" \
                            --template-file "$template" \
                            --tags Framework=sdlf \
                            --capabilities "CAPABILITY_NAMED_IAM" "CAPABILITY_AUTO_EXPAND" \
                            --region "$AWS_REGION" || exit 1
                      done
                    done
          artifacts:
            files:
              - "*"
              - "**/*"

Outputs:
  oArtifactsBucket:
    Description: Name of the Artifacts S3 bucket
    Value: !Ref rArtifactsBucket
